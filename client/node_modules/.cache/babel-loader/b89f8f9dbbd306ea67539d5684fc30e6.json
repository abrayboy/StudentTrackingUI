{"ast":null,"code":"const utils = require('./../util/utils');\n\nmodule.exports = {\n  Student: function (_studentId, coachName, firstGen, race, disability, classification, sevenTargetSchools, notifiedStudent, scholarshipMatchingComplete, scholarshipEssay, scholarshipDeadLines, scholarshipEssay3, reviewOfEssay, completedFafsa, admissionDeadlines, rejected, waitlisted, accepted, collegePacketComplete, coachFinalReview, lor, resume, interview, award) {\n    this.StudentId = _studentId;\n    this.CoachName = coachName;\n    this.FirstGen = utils.TextToBool(firstGen);\n    this.Race = race;\n    this.Disability = utils.TextToBool(disability);\n    this.Classification = classification;\n    this.SevenTargetSchools = utils.TextToBool(sevenTargetSchools);\n    this.NotifiedStudent = utils.TextToBool(notifiedStudent);\n    this.ScholarshipMatchingComplete = utils.TextToBool(scholarshipMatchingComplete);\n    this.ScholarshipEssay = utils.TextToBool(scholarshipEssay);\n    this.ScholarshipDeadlines = scholarshipDeadLines;\n    this.ScholarshipEssay3 = scholarshipEssay3;\n    this.ReviewOfEssay = reviewOfEssay;\n    this.CompletedFafsa = utils.TextToBool(completedFafsa);\n    this.AdmissonDealines = admissionDeadlines;\n    this.Rejected = utils.TextToBool(rejected);\n    this.Waitlisted = utils.TextToBool(waitlisted);\n    this.Accepted = utils.TextToBool(accepted);\n    this.CollegePacketComplete = utils.TextToBool(collegePacketComplete);\n    this.CoachFinalReview = coachFinalReview;\n    this.Lor = lor;\n    this.Resume = utils.TextToBool(resume);\n    this.Interview = utils.TextToBool(interview);\n    this.Award = utils.TextToCurrency(award);\n  },\n  StudentManager: function (_students) {\n    const self = this;\n    this.Students = _students || [];\n\n    this.SetStudents = students => {\n      if (students) self.Students = students;\n    };\n\n    this.AddStudent = student => {\n      if (!student) return false;\n      if (!student.StudentId) return false;\n      let studentIds = self.Students.map(stu => stu.StudentId);\n\n      if (studentIds.indexOf(student.StudentId) === -1) {\n        self.Students.push(student);\n        return true;\n      }\n\n      return false;\n    };\n\n    this.IndexOf = student => {\n      let index = -1;\n\n      if (student) {\n        for (let i = 0; i < self.Students.length; i++) {\n          if (self.Students[i].StudentId == student.StudentId) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    };\n\n    this.UpdateStudent = student => {\n      if (student) {\n        let index = self.IndexOf(student);\n\n        if (index !== -1) {\n          self.Students[index] = student;\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.DeleteStudent = student => {\n      if (student) {\n        let index = self.IndexOf(student);\n\n        if (index !== -1) {\n          self.Students.splice(index, 1);\n          console.log(self.Students);\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.Get = student => {\n      let index = !!student ? self.IndexOf(student) : -1;\n      return self.Students[index];\n    };\n  }\n};","map":{"version":3,"sources":["/Users/juallen/Repo/studenttrackingadmin/client/src/dto/StudentDTO.js"],"names":["utils","require","module","exports","Student","_studentId","coachName","firstGen","race","disability","classification","sevenTargetSchools","notifiedStudent","scholarshipMatchingComplete","scholarshipEssay","scholarshipDeadLines","scholarshipEssay3","reviewOfEssay","completedFafsa","admissionDeadlines","rejected","waitlisted","accepted","collegePacketComplete","coachFinalReview","lor","resume","interview","award","StudentId","CoachName","FirstGen","TextToBool","Race","Disability","Classification","SevenTargetSchools","NotifiedStudent","ScholarshipMatchingComplete","ScholarshipEssay","ScholarshipDeadlines","ScholarshipEssay3","ReviewOfEssay","CompletedFafsa","AdmissonDealines","Rejected","Waitlisted","Accepted","CollegePacketComplete","CoachFinalReview","Lor","Resume","Interview","Award","TextToCurrency","StudentManager","_students","self","Students","SetStudents","students","AddStudent","student","studentIds","map","stu","indexOf","push","IndexOf","index","i","length","UpdateStudent","DeleteStudent","splice","console","log","Get"],"mappings":"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","sourcesContent":["const utils = require('./../util/utils');\nmodule.exports = {\n\n    Student: function (_studentId, coachName, firstGen, race,\n        disability, classification, sevenTargetSchools,\n        notifiedStudent, scholarshipMatchingComplete,\n        scholarshipEssay, scholarshipDeadLines,\n        scholarshipEssay3, reviewOfEssay, completedFafsa,\n        admissionDeadlines, rejected, waitlisted,\n        accepted, collegePacketComplete, coachFinalReview,\n        lor, resume, interview, award) {\n\n\n        this.StudentId = _studentId;\n        this.CoachName = coachName;\n        this.FirstGen = utils.TextToBool(firstGen);\n        this.Race = race;\n        this.Disability = utils.TextToBool(disability);\n        this.Classification = classification;\n        this.SevenTargetSchools = utils.TextToBool(sevenTargetSchools);\n        this.NotifiedStudent = utils.TextToBool(notifiedStudent);\n        this.ScholarshipMatchingComplete = utils.TextToBool(scholarshipMatchingComplete);\n        this.ScholarshipEssay = utils.TextToBool(scholarshipEssay);\n        this.ScholarshipDeadlines = scholarshipDeadLines;\n        this.ScholarshipEssay3 = scholarshipEssay3;\n        this.ReviewOfEssay = reviewOfEssay;\n        this.CompletedFafsa = utils.TextToBool(completedFafsa);\n        this.AdmissonDealines = admissionDeadlines;\n        this.Rejected = utils.TextToBool(rejected);\n        this.Waitlisted = utils.TextToBool(waitlisted);\n        this.Accepted = utils.TextToBool(accepted);\n        this.CollegePacketComplete = utils.TextToBool(collegePacketComplete);\n        this.CoachFinalReview = coachFinalReview;\n        this.Lor = lor;\n        this.Resume = utils.TextToBool(resume);\n        this.Interview = utils.TextToBool(interview);\n        this.Award = utils.TextToCurrency(award);\n    },\n\n    StudentManager: function (_students) {\n\n        const self = this;\n        this.Students =  _students || [];\n\n        this.SetStudents = (students) => {\n            if (students) self.Students = students;\n        };\n\n        this.AddStudent = (student) => {\n            if (!student) return false;\n            if (!student.StudentId) return false;\n            let studentIds = self.Students.map(stu => stu.StudentId);\n            if (studentIds.indexOf(student.StudentId) === -1) {\n                self.Students.push(student)\n                return true;\n            }\n            return false;\n        };\n\n        this.IndexOf = (student) => {\n            let index = -1;\n            if (student) {\n                for (let i = 0; i < self.Students.length; i++) {\n                    if (self.Students[i].StudentId == student.StudentId) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n            return index;\n        };\n\n        this.UpdateStudent = (student) => {\n            if (student) {\n                let index = self.IndexOf(student);\n                if (index !== -1) {\n                    self.Students[index] = student;\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        this.DeleteStudent = (student) => {\n            if (student) {\n                let index = self.IndexOf(student);\n                if (index !== -1) {\n                    self.Students.splice(index, 1);\n                    console.log(self.Students)\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        this.Get = (student) => {\n            let index = !!student ? self.IndexOf(student) : -1;\n            return self.Students[index];\n        };\n    }\n};"]},"metadata":{},"sourceType":"module"}