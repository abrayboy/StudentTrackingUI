{"ast":null,"code":"const utils = require('./../util/utils');\n\nmodule.exports = {\n  Student: function (_studentId, coachName, firstGen, race, disability, classification, sevenTargetSchools, notifiedStudent, scholarshipMatchingComplete, scholarshipEssay, scholarshipDeadLines, scholarshipEssay3, reviewOfEssay, completedFafsa, admissionDeadlines, rejected, waitlisted, accepted, collegePacketComplete, coachFinalReview, lor, resume, interview, award) {\n    this.StudentId = _studentId;\n    this.CoachName = coachName;\n    this.FirstGen = utils.TextToBool(firstGen);\n    this.Race = race;\n    this.Disability = utils.TextToBool(disability);\n    this.Classification = classification;\n    this.SevenTargetSchools = utils.TextToBool(sevenTargetSchools);\n    this.NotifiedStudent = utils.TextToBool(notifiedStudent);\n    this.ScholarshipMatchingComplete = utils.TextToBool(scholarshipMatchingComplete);\n    this.ScholarshipEssay = utils.TextToBool(scholarshipEssay);\n    this.ScholarshipDeadlines = scholarshipDeadLines;\n    this.ScholarshipEssay3 = scholarshipEssay3;\n    this.ReviewOfEssay = reviewOfEssay;\n    this.CompletedFafsa = utils.TextToBool(completedFafsa);\n    this.AdmissonDealines = admissionDeadlines;\n    this.Rejected = utils.TextToBool(rejected);\n    this.Waitlisted = utils.TextToBool(waitlisted);\n    this.Accepted = utils.TextToBool(accepted);\n    this.CollegePacketComplete = utils.TextToBool(collegePacketComplete);\n    this.CoachFinalReview = coachFinalReview;\n    this.Lor = lor;\n    this.Resume = utils.TextToBool(resume);\n    this.Interview = utils.TextToBool(interview);\n    this.Award = utils.TextToCurrency(award);\n  },\n  StudentManager: function (_students) {\n    const self = this;\n    this.Students = _students || [];\n\n    this.SetStudents = students => {\n      if (students) self.Students = students;\n    };\n\n    this.AddStudent = student => {\n      if (!student) return {\n        Message: `Cannot add student: ${student}`\n      };\n      if (!student.StudentId) return {\n        Message: `Cannot add student with student id: ${student}`\n      };\n      let studentIds = self.Students.map(stu => stu.StudentId);\n\n      if (studentIds.indexOf(student.StudentId) === -1) {\n        self.Students.push(student);\n        return true;\n      }\n\n      return {\n        Message: `Duplicate entry for student: ${student.StudentId}`\n      };\n    };\n\n    this.IndexOf = student => {\n      let index = -1;\n\n      for (let i = 0; i < self.Students.length; i++) {\n        if (self.Students[i].StudentId == student.StudentId) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    };\n\n    this.UpdateStudent = student => {\n      let index = self.IndexOf(student);\n\n      if (index !== -1) {\n        self.Students[index] = student;\n        return true;\n      }\n\n      return false;\n    };\n\n    this.DeleteStudent = student => {\n      let index = self.IndexOf(student);\n\n      if (index !== -1) {\n        self.SetStudents(self.Students.splice(index, 1));\n        return true;\n      }\n\n      return false;\n    };\n\n    this.Get = student => {\n      let index = self.IndexOf(student);\n      return self.Students[index];\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/allen/source/repos/StudentTrackingWebsite/client/src/dto/StudentDTO.js"],"names":["utils","require","module","exports","Student","_studentId","coachName","firstGen","race","disability","classification","sevenTargetSchools","notifiedStudent","scholarshipMatchingComplete","scholarshipEssay","scholarshipDeadLines","scholarshipEssay3","reviewOfEssay","completedFafsa","admissionDeadlines","rejected","waitlisted","accepted","collegePacketComplete","coachFinalReview","lor","resume","interview","award","StudentId","CoachName","FirstGen","TextToBool","Race","Disability","Classification","SevenTargetSchools","NotifiedStudent","ScholarshipMatchingComplete","ScholarshipEssay","ScholarshipDeadlines","ScholarshipEssay3","ReviewOfEssay","CompletedFafsa","AdmissonDealines","Rejected","Waitlisted","Accepted","CollegePacketComplete","CoachFinalReview","Lor","Resume","Interview","Award","TextToCurrency","StudentManager","_students","self","Students","SetStudents","students","AddStudent","student","Message","studentIds","map","stu","indexOf","push","IndexOf","index","i","length","UpdateStudent","DeleteStudent","splice","Get"],"mappings":"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","sourcesContent":["const utils = require('./../util/utils');\r\nmodule.exports = {\r\n\r\n    Student: function (_studentId, coachName, firstGen, race,\r\n        disability, classification, sevenTargetSchools,\r\n        notifiedStudent, scholarshipMatchingComplete,\r\n        scholarshipEssay, scholarshipDeadLines,\r\n        scholarshipEssay3, reviewOfEssay, completedFafsa,\r\n        admissionDeadlines, rejected, waitlisted,\r\n        accepted, collegePacketComplete, coachFinalReview,\r\n        lor, resume, interview, award) {\r\n\r\n        \r\n        this.StudentId =  _studentId;\r\n        this.CoachName = coachName;\r\n        this.FirstGen = utils.TextToBool(firstGen);\r\n        this.Race = race;\r\n        this.Disability = utils.TextToBool(disability);\r\n        this.Classification = classification;\r\n        this.SevenTargetSchools = utils.TextToBool(sevenTargetSchools);\r\n        this.NotifiedStudent = utils.TextToBool(notifiedStudent);\r\n        this.ScholarshipMatchingComplete = utils.TextToBool(scholarshipMatchingComplete);\r\n        this.ScholarshipEssay = utils.TextToBool(scholarshipEssay);\r\n        this.ScholarshipDeadlines = scholarshipDeadLines;\r\n        this.ScholarshipEssay3 = scholarshipEssay3;\r\n        this.ReviewOfEssay = reviewOfEssay;\r\n        this.CompletedFafsa = utils.TextToBool(completedFafsa);\r\n        this.AdmissonDealines = admissionDeadlines;\r\n        this.Rejected = utils.TextToBool(rejected);\r\n        this.Waitlisted = utils.TextToBool(waitlisted);\r\n        this.Accepted = utils.TextToBool(accepted);\r\n        this.CollegePacketComplete = utils.TextToBool(collegePacketComplete);\r\n        this.CoachFinalReview = coachFinalReview;\r\n        this.Lor = lor;\r\n        this.Resume = utils.TextToBool(resume);\r\n        this.Interview = utils.TextToBool(interview);\r\n        this.Award = utils.TextToCurrency(award);\r\n    },\r\n\r\n    StudentManager: function (_students) {\r\n\r\n        const self = this;\r\n        this.Students =  _students || [];\r\n\r\n        this.SetStudents = (students) => {\r\n            if (students) self.Students = students;\r\n        };\r\n\r\n        this.AddStudent = (student) => {\r\n            if (!student) return { Message: `Cannot add student: ${student}` };\r\n            if (!student.StudentId) return { Message: `Cannot add student with student id: ${student}` };\r\n            let studentIds = self.Students.map(stu => stu.StudentId);\r\n            if (studentIds.indexOf(student.StudentId) === -1) {\r\n                self.Students.push(student)\r\n                return true;\r\n            }\r\n            return { Message: `Duplicate entry for student: ${student.StudentId}` }\r\n        };\r\n\r\n        this.IndexOf = (student) => {\r\n            let index = -1;\r\n            for (let i = 0; i < self.Students.length; i++)\r\n            {\r\n                if (self.Students[i].StudentId == student.StudentId) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            return index;\r\n        };\r\n\r\n        this.UpdateStudent = (student) => {\r\n            let index = self.IndexOf(student);\r\n            if (index !== -1) {\r\n                self.Students[index] = student;\r\n                return true;\r\n            } \r\n            return false;\r\n        };\r\n\r\n        this.DeleteStudent = (student) => {\r\n            let index = self.IndexOf(student);\r\n            if (index !== -1) {\r\n                self.SetStudents(self.Students.splice(index, 1));\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.Get = (student) => {\r\n            let index = self.IndexOf(student);\r\n            return self.Students[index];\r\n        }; \r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}